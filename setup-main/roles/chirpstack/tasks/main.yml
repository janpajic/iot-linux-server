---

# TODO Use the PostgreSQL module

- name: Create ChirpStack Application Server role in PostgreSQL
  become: yes
  ansible.builtin.command: sudo -u postgres psql -c "create role chirpstack_as with login password '{{ lookup('password', 'passwords/' + inventory_hostname + '/pgsql-chirpstack-role-as chars=ascii_letters,digits length=16')}}';"

- name: Create ChirpStack Network Server role in PostgreSQL
  become: yes
  ansible.builtin.command: sudo -u postgres psql -c "create role chirpstack_ns with login password '{{ lookup('password', 'passwords/' + inventory_hostname + '/pgsql-chirpstack-role-ns chars=ascii_letters,digits length=16')}}';"

- name: Create ChirpStack Application Server database
  become: yes
  ansible.builtin.command: sudo -u postgres psql -c "create database chirpstack_as with owner chirpstack_as;"

- name: Create ChirpStack Network server database
  become: yes
  ansible.builtin.command: sudo -u postgres psql -c "create database chirpstack_ns with owner chirpstack_ns;"

- name: Create ChirpStack pg_trm extension in PostgreSQL
  become: yes
  ansible.builtin.command: sudo -u postgres psql chirpstack_as -c "create extension pg_trgm;"

- name: Create ChirpStack hstore extension in PostgreSQL
  become: yes
  ansible.builtin.command: sudo -u postgres psql chirpstack_as -c "create extension hstore;"

- name: Remove ChirpStack Application Server Configuration file
  ansible.builtin.file:
    path: /etc/chirpstack-application-server/chirpstack-application-server.toml
    state: absent

- name: Remove ChirpStack Network Server Configuration file
  ansible.builtin.file:
    path: /etc/chirpstack-network-server/chirpstack-network-server.toml
    state: absent

- name: Edit ChirpStack Network Server Configuration
  become: yes
  vars:
    - password: "{{ lookup('file', 'passwords/' + inventory_hostname + '/pgsql-chirpstack-role-ns') }}"
  ansible.builtin.template:
    src: ns.toml.j2
    dest: /etc/chirpstack-network-server/chirpstack-network-server.toml

- name: Edit ChirpStack Application Server Configuration
  become: yes
  vars:
    - password: "{{ lookup('file', 'passwords/' + inventory_hostname + '/pgsql-chirpstack-role-as') }}"
    - jwt_secret: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  ansible.builtin.template:
    src: as.toml.j2
    dest: /etc/chirpstack-application-server/chirpstack-application-server.toml

- name: Enable ChirpStack Gateway Bridge service
  become: yes
  ansible.builtin.service:
    name: chirpstack-gateway-bridge
    state: started
    enabled: yes

- name: Enable ChirpStack Network Server service
  become: yes
  ansible.builtin.service:
    name: chirpstack-network-server
    state: started
    enabled: yes

- name: Enable ChirpStack Application Server service
  become: yes
  ansible.builtin.service:
    name: chirpstack-application-server
    state: started
    enabled: yes

- name: Wait to start ChirpStack Application Server service
  ansible.builtin.pause:
    seconds: 30

- name: Get JWT token
  ansible.builtin.uri:
    url: "{{ chirpstack_url }}/api/internal/login"
    body:
      email: admin
      password: admin
    body_format: json
    method: POST
    status_code: 200
    return_content: yes
  register: chirpstack_token

- name: Change admin password
  ansible.builtin.uri:
    url: "{{ chirpstack_url }}/api/users/1/password"
    headers:
      Grpc-Metadata-Authorization: Bearer {{ chirpstack_token.json.jwt }}
    body:
      password: "{{ password }}"
      userId: 1
    body_format: json
    method: PUT
    status_code: 200
    return_content: yes

- name: Add network server
  ansible.builtin.uri:
    url: "{{ chirpstack_url }}/api/network-servers"
    headers:
      Grpc-Metadata-Authorization: "Bearer {{ chirpstack_token.json.jwt }}"
    body:
      networkServer:
          name: hio-network-server-local
          server: localhost:8000
    body_format: json
    method: POST
    status_code: 200
    return_content: yes

- name: Update default organization
  ansible.builtin.uri:
    url: "{{ chirpstack_url }}/api/organizations/1"
    headers:
      Grpc-Metadata-Authorization: "Bearer {{ chirpstack_token.json.jwt }}"
    body:
      organization:
        canHaveGateways: True
        displayName: hio-organization-hardwario
        name: hio-organization-hardwario
    body_format: json
    method: PUT
    status_code: 200
    return_content: yes

- name: Create Service profile
  ansible.builtin.uri:
    url: "{{ chirpstack_url }}/api/service-profiles"
    headers:
      Grpc-Metadata-Authorization: "Bearer {{ chirpstack_token.json.jwt }}"
    body:
      serviceProfile:
        addGWMetaData: True
        name: hio-service-profile
        networkServerID: 1
        drmin: 1
        drmax: 5
        devStatusReqFreq: 0
        gwsPrivate: True
        nwkGeoLoc: False
        organizationID: 1
    body_format: json
    method: POST
    status_code: 200
    return_content: yes
  register: chirpstack_default_service

- name: Create gateway
  ansible.builtin.uri:
    url: "{{ chirpstack_url }}/api/gateways"
    headers:
      Grpc-Metadata-Authorization: "Bearer {{ chirpstack_token.json.jwt }}"
    body:
      gateway:
        name: hio-gateway-ember-mikrotik
        description: hio-gateway-ember-mikrotik
        id: "0000000000000000"
        location: {}
        organizationID: 1
        serviceProfileID: "{{ chirpstack_default_service.json.id }}"
        networkServerID: 1
    body_format: json
    method: POST
    status_code: 200
    return_content: yes
